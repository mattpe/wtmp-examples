import SodexoData from './modules/sodexo-data';
import FazerData from './modules/fazer-data';

const today = new Date().toISOString().split('T')[0];
let languageSetting = 'fi';

/**
 * Displays lunch menu items as html list
 *
 * @param {Array} menuData - Lunch menu array
 * @param {string} restaurant - element target id
 */
const renderMenu = (menuData, restaurant) => {
  const restaurantDiv = document.querySelector('#' + restaurant);
  restaurantDiv.innerHTML = '';
  const ul = document.createElement('ul');
  for (const item of menuData) {
    const listItem = document.createElement('li');
    listItem.textContent = item;
    ul.appendChild(listItem);
  }
  restaurantDiv.appendChild(ul);
};

/**
 * Displays a notification message instead of dishes
 * when menu data is not available
 *
 * @param {string} message
 * @param {string} restaurant
 */
const renderNoDataNotification = (message, restaurant) => {
  const restaurantDiv = document.querySelector('#' + restaurant);
  restaurantDiv.innerHTML = `<p>${message}</p>`;
};

/**
 * Switches application language between en/fi
 * and updates menu data
 */
const switchLanguage = () => {
  if (languageSetting === 'fi') {
    languageSetting = 'en';
  } else {
    languageSetting = 'fi';
  }
  console.log('language changed to: ', languageSetting);
  loadAllMenuData();
};

/**
 * Load data for all restaurant boxes
 * @async
 */
const loadAllMenuData = async () => {
  // Load Sodexo menu
  try {
    const parsedMenu = await SodexoData.getDailyMenu(languageSetting, today);
    renderMenu(parsedMenu, 'sodexo');
  } catch (error) {
    console.error(error);
    // notify user if errors with data
    renderNoDataNotification('No data available..', 'sodexo');
  }
  // Load Fazer menu (date hardcoded for testing with existing data)
  try {
    const parsedMenu = await FazerData.getDailyMenu(languageSetting, '2020-09-01');
    renderMenu(parsedMenu, 'fazer');
  } catch (error) {
    console.error(error);
    // notify user if errors with data
    renderNoDataNotification('No data available..', 'fazer');
  }
};

/**
 * Registers the service worker (SW) generated by Workbox
 */
const registerServiceWorkers = () => {
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('./service-worker.js').then(registration => {
        console.log('SW registered: ', registration);
      }).catch(registrationError => {
        console.log('SW registration failed: ', registrationError);
      });
    });
  }
};

/**
 * App initialization
 */
const init = () => {
  document.querySelector('#switch-lang').addEventListener('click', switchLanguage);
  loadAllMenuData();
  // Service workers registeration below disabled temporarily for easier local development
  // must be uncommented from init() before building for "production"
  //registerServiceWorkers();
};
init();
